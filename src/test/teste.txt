==16544== Memcheck, a memory error detector
==16544== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16544== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==16544== Command: ./a
==16544== Parent PID: 13450
==16544== 
==16544== Invalid write of size 1
==16544==    at 0x109663: JavaClass::setConstPool(_IO_FILE*) (JavaClass.cpp:98)
==16544==    by 0x109082: JavaClass::JavaClass(_IO_FILE*) (JavaClass.cpp:16)
==16544==    by 0x109CFA: main (test.cpp:12)
==16544==  Address 0x5b22806 is 5 bytes after a block of size 1 alloc'd
==16544==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==16544==    by 0x10C3B7: __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (new_allocator.h:111)
==16544==    by 0x10C08F: std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (alloc_traits.h:436)
==16544==    by 0x10BC29: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) (stl_vector.h:172)
==16544==    by 0x10B1A5: void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&) (vector.tcc:406)
==16544==    by 0x10A781: std::vector<unsigned char, std::allocator<unsigned char> >::push_back(unsigned char const&) (stl_vector.h:948)
==16544==    by 0x109616: JavaClass::setConstPool(_IO_FILE*) (JavaClass.cpp:96)
==16544==    by 0x109082: JavaClass::JavaClass(_IO_FILE*) (JavaClass.cpp:16)
==16544==    by 0x109CFA: main (test.cpp:12)
==16544== 
==16544== 
==16544== HEAP SUMMARY:
==16544==     in use at exit: 272 bytes in 17 blocks
==16544==   total heap usage: 119 allocs, 102 frees, 80,799 bytes allocated
==16544== 
==16544== 272 bytes in 17 blocks are definitely lost in loss record 1 of 1
==16544==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==16544==    by 0x10C3B7: __gnu_cxx::new_allocator<unsigned char>::allocate(unsigned long, void const*) (new_allocator.h:111)
==16544==    by 0x10C08F: std::allocator_traits<std::allocator<unsigned char> >::allocate(std::allocator<unsigned char>&, unsigned long) (alloc_traits.h:436)
==16544==    by 0x10BC29: std::_Vector_base<unsigned char, std::allocator<unsigned char> >::_M_allocate(unsigned long) (stl_vector.h:172)
==16544==    by 0x10B1A5: void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&) (vector.tcc:406)
==16544==    by 0x10A781: std::vector<unsigned char, std::allocator<unsigned char> >::push_back(unsigned char const&) (stl_vector.h:948)
==16544==    by 0x109616: JavaClass::setConstPool(_IO_FILE*) (JavaClass.cpp:96)
==16544==    by 0x109082: JavaClass::JavaClass(_IO_FILE*) (JavaClass.cpp:16)
==16544==    by 0x109CFA: main (test.cpp:12)
==16544== 
==16544== LEAK SUMMARY:
==16544==    definitely lost: 272 bytes in 17 blocks
==16544==    indirectly lost: 0 bytes in 0 blocks
==16544==      possibly lost: 0 bytes in 0 blocks
==16544==    still reachable: 0 bytes in 0 blocks
==16544==         suppressed: 0 bytes in 0 blocks
==16544== 
==16544== For counts of detected and suppressed errors, rerun with: -v
==16544== ERROR SUMMARY: 157 errors from 2 contexts (suppressed: 0 from 0)
